// <auto-generated />
using System;
using DataAccess.Repositories.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Repositories.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230616082614_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.LikeComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeComments");
                });

            modelBuilder.Entity("DataAccess.Models.LikePost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsLikedPost")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("LikePosts");
                });

            modelBuilder.Entity("DataAccess.Models.PostTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PostId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            PostId = 1,
                            TagId = 2
                        },
                        new
                        {
                            Id = 3,
                            PostId = 2,
                            TagId = 1
                        },
                        new
                        {
                            Id = 4,
                            PostId = 2,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bmw"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fiat"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Toyota"
                        });
                });

            modelBuilder.Entity("ForumManagementSystem.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountComment")
                        .HasColumnType("int");

                    b.Property<int>("CountPosts")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountComment = 0,
                            CountPosts = 0,
                            DateTime = new DateTime(2023, 6, 16, 11, 26, 13, 781, DateTimeKind.Local).AddTicks(5590),
                            Description = "Discussions about all the countries that fall in the Asian continent including the middle eastern countries.",
                            Name = "Asian"
                        },
                        new
                        {
                            Id = 2,
                            CountComment = 0,
                            CountPosts = 0,
                            DateTime = new DateTime(2023, 6, 16, 11, 26, 13, 781, DateTimeKind.Local).AddTicks(5646),
                            Description = "European countries related discussions in this forum and that includes the UK as well you dumbo!",
                            Name = "Europe"
                        },
                        new
                        {
                            Id = 3,
                            CountComment = 0,
                            CountPosts = 0,
                            DateTime = new DateTime(2023, 6, 16, 11, 26, 13, 781, DateTimeKind.Local).AddTicks(5651),
                            Description = "Yes USA and Canada and whatever else is up there. Please feel free to ask why they drive on the wrong side of the road if you like.",
                            Name = "North America"
                        },
                        new
                        {
                            Id = 7,
                            CountComment = 0,
                            CountPosts = 0,
                            DateTime = new DateTime(2023, 6, 16, 11, 26, 13, 781, DateTimeKind.Local).AddTicks(5656),
                            Description = "Discussions about Antarctica or anything else.",
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("ForumManagementSystem.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "The best town!",
                            DateTime = new DateTime(2023, 6, 16, 11, 26, 13, 781, DateTimeKind.Local).AddTicks(5747),
                            LikesCount = 0,
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "The worst town!",
                            DateTime = new DateTime(2023, 6, 16, 11, 26, 13, 781, DateTimeKind.Local).AddTicks(5755),
                            LikesCount = 0,
                            PostId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ForumManagementSystem.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostLikesCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "When you are able to get an accommodation that has a kitchen and cooking implements, do you cook your own food? My sister has that style. She cooks breakfast at least so they can save a little money. We once had booked in a small hotel in Hong Kong but we forgo with the cooking. For us, a vacation should be savored to the fullest.",
                            DateTime = new DateTime(2023, 6, 16, 11, 26, 13, 781, DateTimeKind.Local).AddTicks(5702),
                            PostLikesCount = 0,
                            Title = "Cooking Your Food",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "So the help which I require is that I would like to know what things to do in Windsor?",
                            DateTime = new DateTime(2023, 6, 16, 11, 26, 13, 781, DateTimeKind.Local).AddTicks(5712),
                            PostLikesCount = 0,
                            Title = "Things To Do In Windsor",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Content = "Any recommendations of areas to look into in either Washington or Northern California?",
                            DateTime = new DateTime(2023, 6, 16, 11, 26, 13, 781, DateTimeKind.Local).AddTicks(5716),
                            PostLikesCount = 0,
                            Title = "Camping In The Northwest",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("ForumManagementSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "i.draganov@gmail.com",
                            FirstName = "Ivan",
                            LastName = "Draganov",
                            Password = "MTIz",
                            PhoneNumber = "0897556285",
                            Username = "ivanchoDraganchov"
                        },
                        new
                        {
                            Id = 2,
                            Email = "m.petrova@gmail.com",
                            FirstName = "Mariq",
                            LastName = "Petrova",
                            Password = "wdljsl",
                            PhoneNumber = "0897554285",
                            Username = "mariicheto"
                        },
                        new
                        {
                            Id = 3,
                            Email = "m.dobreva@gmail.com",
                            FirstName = "Mara",
                            LastName = "Dobreva",
                            Password = "fjsdda",
                            PhoneNumber = "0797556285",
                            Username = "marcheto"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.LikeComment", b =>
                {
                    b.HasOne("ForumManagementSystem.Models.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForumManagementSystem.Models.User", "User")
                        .WithMany("LikeComments")
                        .HasForeignKey("UserId");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.LikePost", b =>
                {
                    b.HasOne("ForumManagementSystem.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForumManagementSystem.Models.User", "User")
                        .WithMany("LikePosts")
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.PostTag", b =>
                {
                    b.HasOne("ForumManagementSystem.Models.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ForumManagementSystem.Models.Comment", b =>
                {
                    b.HasOne("ForumManagementSystem.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForumManagementSystem.Models.User", "CreatedBy")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ForumManagementSystem.Models.Post", b =>
                {
                    b.HasOne("ForumManagementSystem.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForumManagementSystem.Models.User", "CreatedBy")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("DataAccess.Models.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("ForumManagementSystem.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ForumManagementSystem.Models.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ForumManagementSystem.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("ForumManagementSystem.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikeComments");

                    b.Navigation("LikePosts");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
